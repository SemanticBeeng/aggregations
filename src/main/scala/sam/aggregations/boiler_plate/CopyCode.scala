package sam.aggregations.boiler_plate

import sam.aggregations.Aggregator
import shapeless.{::, HNil}

object CopyCode {
  def apply(num: Int): String =
    (1 to num).map(i => {
      val typeParms = (1 to i).map(j => s"S$j").mkString(", ")
      val aggType = (1 to i).map(j => s"Aggregator[S$j, _, _]").mkString(" :: ")
      val statesType = (1 to i).map(j => s"S$j").mkString(" :: ")
      val returnType = statesType
      val methodName = "copyStates"
      s"def $methodName$i[$typeParms](agg: $aggType :: HNil, states: $statesType :: HNil): $returnType :: HNil = " +
        s"agg.head.copyStates(states.head) :: $methodName${i - 1}(agg.tail, states.tail)"
    }).mkString("\n")

  def copyStates0(agg: HNil, state: HNil): HNil = HNil

  def copyStates1[S1](agg: Aggregator[S1, _, _] :: HNil, states: S1 :: HNil): S1 :: HNil = agg.head.copyStates(states.head) :: copyStates0(agg.tail, states.tail)
  def copyStates2[S1, S2](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: HNil, states: S1 :: S2 :: HNil): S1 :: S2 :: HNil = agg.head.copyStates(states.head) :: copyStates1(agg.tail, states.tail)
  def copyStates3[S1, S2, S3](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: HNil, states: S1 :: S2 :: S3 :: HNil): S1 :: S2 :: S3 :: HNil = agg.head.copyStates(states.head) :: copyStates2(agg.tail, states.tail)
  def copyStates4[S1, S2, S3, S4](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: HNil): S1 :: S2 :: S3 :: S4 :: HNil = agg.head.copyStates(states.head) :: copyStates3(agg.tail, states.tail)
  def copyStates5[S1, S2, S3, S4, S5](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: HNil = agg.head.copyStates(states.head) :: copyStates4(agg.tail, states.tail)
  def copyStates6[S1, S2, S3, S4, S5, S6](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: Aggregator[S6, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: HNil = agg.head.copyStates(states.head) :: copyStates5(agg.tail, states.tail)
  def copyStates7[S1, S2, S3, S4, S5, S6, S7](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: Aggregator[S6, _, _] :: Aggregator[S7, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: HNil = agg.head.copyStates(states.head) :: copyStates6(agg.tail, states.tail)
  def copyStates8[S1, S2, S3, S4, S5, S6, S7, S8](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: Aggregator[S6, _, _] :: Aggregator[S7, _, _] :: Aggregator[S8, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: HNil = agg.head.copyStates(states.head) :: copyStates7(agg.tail, states.tail)
  def copyStates9[S1, S2, S3, S4, S5, S6, S7, S8, S9](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: Aggregator[S6, _, _] :: Aggregator[S7, _, _] :: Aggregator[S8, _, _] :: Aggregator[S9, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: HNil = agg.head.copyStates(states.head) :: copyStates8(agg.tail, states.tail)
  def copyStates10[S1, S2, S3, S4, S5, S6, S7, S8, S9, S10](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: Aggregator[S6, _, _] :: Aggregator[S7, _, _] :: Aggregator[S8, _, _] :: Aggregator[S9, _, _] :: Aggregator[S10, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: HNil = agg.head.copyStates(states.head) :: copyStates9(agg.tail, states.tail)
  def copyStates11[S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: Aggregator[S6, _, _] :: Aggregator[S7, _, _] :: Aggregator[S8, _, _] :: Aggregator[S9, _, _] :: Aggregator[S10, _, _] :: Aggregator[S11, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: HNil = agg.head.copyStates(states.head) :: copyStates10(agg.tail, states.tail)
  def copyStates12[S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: Aggregator[S6, _, _] :: Aggregator[S7, _, _] :: Aggregator[S8, _, _] :: Aggregator[S9, _, _] :: Aggregator[S10, _, _] :: Aggregator[S11, _, _] :: Aggregator[S12, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: HNil = agg.head.copyStates(states.head) :: copyStates11(agg.tail, states.tail)
  def copyStates13[S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: Aggregator[S6, _, _] :: Aggregator[S7, _, _] :: Aggregator[S8, _, _] :: Aggregator[S9, _, _] :: Aggregator[S10, _, _] :: Aggregator[S11, _, _] :: Aggregator[S12, _, _] :: Aggregator[S13, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: HNil = agg.head.copyStates(states.head) :: copyStates12(agg.tail, states.tail)
  def copyStates14[S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: Aggregator[S6, _, _] :: Aggregator[S7, _, _] :: Aggregator[S8, _, _] :: Aggregator[S9, _, _] :: Aggregator[S10, _, _] :: Aggregator[S11, _, _] :: Aggregator[S12, _, _] :: Aggregator[S13, _, _] :: Aggregator[S14, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: HNil = agg.head.copyStates(states.head) :: copyStates13(agg.tail, states.tail)
  def copyStates15[S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: Aggregator[S6, _, _] :: Aggregator[S7, _, _] :: Aggregator[S8, _, _] :: Aggregator[S9, _, _] :: Aggregator[S10, _, _] :: Aggregator[S11, _, _] :: Aggregator[S12, _, _] :: Aggregator[S13, _, _] :: Aggregator[S14, _, _] :: Aggregator[S15, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: HNil = agg.head.copyStates(states.head) :: copyStates14(agg.tail, states.tail)
  def copyStates16[S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: Aggregator[S6, _, _] :: Aggregator[S7, _, _] :: Aggregator[S8, _, _] :: Aggregator[S9, _, _] :: Aggregator[S10, _, _] :: Aggregator[S11, _, _] :: Aggregator[S12, _, _] :: Aggregator[S13, _, _] :: Aggregator[S14, _, _] :: Aggregator[S15, _, _] :: Aggregator[S16, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: HNil = agg.head.copyStates(states.head) :: copyStates15(agg.tail, states.tail)
  def copyStates17[S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: Aggregator[S6, _, _] :: Aggregator[S7, _, _] :: Aggregator[S8, _, _] :: Aggregator[S9, _, _] :: Aggregator[S10, _, _] :: Aggregator[S11, _, _] :: Aggregator[S12, _, _] :: Aggregator[S13, _, _] :: Aggregator[S14, _, _] :: Aggregator[S15, _, _] :: Aggregator[S16, _, _] :: Aggregator[S17, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: HNil = agg.head.copyStates(states.head) :: copyStates16(agg.tail, states.tail)
  def copyStates18[S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: Aggregator[S6, _, _] :: Aggregator[S7, _, _] :: Aggregator[S8, _, _] :: Aggregator[S9, _, _] :: Aggregator[S10, _, _] :: Aggregator[S11, _, _] :: Aggregator[S12, _, _] :: Aggregator[S13, _, _] :: Aggregator[S14, _, _] :: Aggregator[S15, _, _] :: Aggregator[S16, _, _] :: Aggregator[S17, _, _] :: Aggregator[S18, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: S18 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: S18 :: HNil = agg.head.copyStates(states.head) :: copyStates17(agg.tail, states.tail)
  def copyStates19[S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: Aggregator[S6, _, _] :: Aggregator[S7, _, _] :: Aggregator[S8, _, _] :: Aggregator[S9, _, _] :: Aggregator[S10, _, _] :: Aggregator[S11, _, _] :: Aggregator[S12, _, _] :: Aggregator[S13, _, _] :: Aggregator[S14, _, _] :: Aggregator[S15, _, _] :: Aggregator[S16, _, _] :: Aggregator[S17, _, _] :: Aggregator[S18, _, _] :: Aggregator[S19, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: S18 :: S19 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: S18 :: S19 :: HNil = agg.head.copyStates(states.head) :: copyStates18(agg.tail, states.tail)
  def copyStates20[S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19, S20](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: Aggregator[S6, _, _] :: Aggregator[S7, _, _] :: Aggregator[S8, _, _] :: Aggregator[S9, _, _] :: Aggregator[S10, _, _] :: Aggregator[S11, _, _] :: Aggregator[S12, _, _] :: Aggregator[S13, _, _] :: Aggregator[S14, _, _] :: Aggregator[S15, _, _] :: Aggregator[S16, _, _] :: Aggregator[S17, _, _] :: Aggregator[S18, _, _] :: Aggregator[S19, _, _] :: Aggregator[S20, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: S18 :: S19 :: S20 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: S18 :: S19 :: S20 :: HNil = agg.head.copyStates(states.head) :: copyStates19(agg.tail, states.tail)
  def copyStates21[S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19, S20, S21](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: Aggregator[S6, _, _] :: Aggregator[S7, _, _] :: Aggregator[S8, _, _] :: Aggregator[S9, _, _] :: Aggregator[S10, _, _] :: Aggregator[S11, _, _] :: Aggregator[S12, _, _] :: Aggregator[S13, _, _] :: Aggregator[S14, _, _] :: Aggregator[S15, _, _] :: Aggregator[S16, _, _] :: Aggregator[S17, _, _] :: Aggregator[S18, _, _] :: Aggregator[S19, _, _] :: Aggregator[S20, _, _] :: Aggregator[S21, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: S18 :: S19 :: S20 :: S21 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: S18 :: S19 :: S20 :: S21 :: HNil = agg.head.copyStates(states.head) :: copyStates20(agg.tail, states.tail)
  def copyStates22[S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19, S20, S21, S22](agg: Aggregator[S1, _, _] :: Aggregator[S2, _, _] :: Aggregator[S3, _, _] :: Aggregator[S4, _, _] :: Aggregator[S5, _, _] :: Aggregator[S6, _, _] :: Aggregator[S7, _, _] :: Aggregator[S8, _, _] :: Aggregator[S9, _, _] :: Aggregator[S10, _, _] :: Aggregator[S11, _, _] :: Aggregator[S12, _, _] :: Aggregator[S13, _, _] :: Aggregator[S14, _, _] :: Aggregator[S15, _, _] :: Aggregator[S16, _, _] :: Aggregator[S17, _, _] :: Aggregator[S18, _, _] :: Aggregator[S19, _, _] :: Aggregator[S20, _, _] :: Aggregator[S21, _, _] :: Aggregator[S22, _, _] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: S18 :: S19 :: S20 :: S21 :: S22 :: HNil): S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: S18 :: S19 :: S20 :: S21 :: S22 :: HNil = agg.head.copyStates(states.head) :: copyStates21(agg.tail, states.tail)


}
