package sam.aggregations.boiler_plate

import sam.aggregations.Aggregator
import shapeless.{::, HNil}

object AggToResultsCode {
  // TODO Get a PHd in Scala Macros so I can work out how to do really simple stuff like this using macros
  def apply(num: Int): String =
    (1 to num).map(i => {
      val typeParms = (1 to i).map(j => s"R$j, S$j").mkString(", ")
      val aggType = (1 to i).map(j => s"Aggregator[S$j, _, R$j]").mkString(" :: ")
      val statesType = (1 to i).map(j => s"S$j").mkString(" :: ")
      val returnType = (1 to i).map(j => s"R$j").mkString(" :: ")
      val methodName = "aggsToResults"
      s"def $methodName$i[$typeParms](agg: $aggType :: HNil, states: $statesType :: HNil): $returnType :: HNil = " +
        s"agg.head.result(states.head) :: $methodName${i - 1}(agg.tail, states.tail)"
    }).mkString("\n")

  def aggsToResults0(agg: HNil, state: HNil): HNil = HNil

  def aggsToResults1[R1, S1](agg: Aggregator[S1, _, R1] :: HNil, states: S1 :: HNil): R1 :: HNil = agg.head.result(states.head) :: aggsToResults0(agg.tail, states.tail)
  def aggsToResults2[R1, S1, R2, S2](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: HNil, states: S1 :: S2 :: HNil): R1 :: R2 :: HNil = agg.head.result(states.head) :: aggsToResults1(agg.tail, states.tail)
  def aggsToResults3[R1, S1, R2, S2, R3, S3](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: HNil, states: S1 :: S2 :: S3 :: HNil): R1 :: R2 :: R3 :: HNil = agg.head.result(states.head) :: aggsToResults2(agg.tail, states.tail)
  def aggsToResults4[R1, S1, R2, S2, R3, S3, R4, S4](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: HNil, states: S1 :: S2 :: S3 :: S4 :: HNil): R1 :: R2 :: R3 :: R4 :: HNil = agg.head.result(states.head) :: aggsToResults3(agg.tail, states.tail)
  def aggsToResults5[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: HNil = agg.head.result(states.head) :: aggsToResults4(agg.tail, states.tail)
  def aggsToResults6[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5, R6, S6](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: Aggregator[S6, _, R6] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: R6 :: HNil = agg.head.result(states.head) :: aggsToResults5(agg.tail, states.tail)
  def aggsToResults7[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5, R6, S6, R7, S7](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: Aggregator[S6, _, R6] :: Aggregator[S7, _, R7] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: R6 :: R7 :: HNil = agg.head.result(states.head) :: aggsToResults6(agg.tail, states.tail)
  def aggsToResults8[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5, R6, S6, R7, S7, R8, S8](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: Aggregator[S6, _, R6] :: Aggregator[S7, _, R7] :: Aggregator[S8, _, R8] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: R6 :: R7 :: R8 :: HNil = agg.head.result(states.head) :: aggsToResults7(agg.tail, states.tail)
  def aggsToResults9[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5, R6, S6, R7, S7, R8, S8, R9, S9](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: Aggregator[S6, _, R6] :: Aggregator[S7, _, R7] :: Aggregator[S8, _, R8] :: Aggregator[S9, _, R9] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: R6 :: R7 :: R8 :: R9 :: HNil = agg.head.result(states.head) :: aggsToResults8(agg.tail, states.tail)
  def aggsToResults10[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5, R6, S6, R7, S7, R8, S8, R9, S9, R10, S10](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: Aggregator[S6, _, R6] :: Aggregator[S7, _, R7] :: Aggregator[S8, _, R8] :: Aggregator[S9, _, R9] :: Aggregator[S10, _, R10] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: R6 :: R7 :: R8 :: R9 :: R10 :: HNil = agg.head.result(states.head) :: aggsToResults9(agg.tail, states.tail)
  def aggsToResults11[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5, R6, S6, R7, S7, R8, S8, R9, S9, R10, S10, R11, S11](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: Aggregator[S6, _, R6] :: Aggregator[S7, _, R7] :: Aggregator[S8, _, R8] :: Aggregator[S9, _, R9] :: Aggregator[S10, _, R10] :: Aggregator[S11, _, R11] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: R6 :: R7 :: R8 :: R9 :: R10 :: R11 :: HNil = agg.head.result(states.head) :: aggsToResults10(agg.tail, states.tail)
  def aggsToResults12[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5, R6, S6, R7, S7, R8, S8, R9, S9, R10, S10, R11, S11, R12, S12](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: Aggregator[S6, _, R6] :: Aggregator[S7, _, R7] :: Aggregator[S8, _, R8] :: Aggregator[S9, _, R9] :: Aggregator[S10, _, R10] :: Aggregator[S11, _, R11] :: Aggregator[S12, _, R12] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: R6 :: R7 :: R8 :: R9 :: R10 :: R11 :: R12 :: HNil = agg.head.result(states.head) :: aggsToResults11(agg.tail, states.tail)
  def aggsToResults13[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5, R6, S6, R7, S7, R8, S8, R9, S9, R10, S10, R11, S11, R12, S12, R13, S13](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: Aggregator[S6, _, R6] :: Aggregator[S7, _, R7] :: Aggregator[S8, _, R8] :: Aggregator[S9, _, R9] :: Aggregator[S10, _, R10] :: Aggregator[S11, _, R11] :: Aggregator[S12, _, R12] :: Aggregator[S13, _, R13] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: R6 :: R7 :: R8 :: R9 :: R10 :: R11 :: R12 :: R13 :: HNil = agg.head.result(states.head) :: aggsToResults12(agg.tail, states.tail)
  def aggsToResults14[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5, R6, S6, R7, S7, R8, S8, R9, S9, R10, S10, R11, S11, R12, S12, R13, S13, R14, S14](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: Aggregator[S6, _, R6] :: Aggregator[S7, _, R7] :: Aggregator[S8, _, R8] :: Aggregator[S9, _, R9] :: Aggregator[S10, _, R10] :: Aggregator[S11, _, R11] :: Aggregator[S12, _, R12] :: Aggregator[S13, _, R13] :: Aggregator[S14, _, R14] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: R6 :: R7 :: R8 :: R9 :: R10 :: R11 :: R12 :: R13 :: R14 :: HNil = agg.head.result(states.head) :: aggsToResults13(agg.tail, states.tail)
  def aggsToResults15[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5, R6, S6, R7, S7, R8, S8, R9, S9, R10, S10, R11, S11, R12, S12, R13, S13, R14, S14, R15, S15](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: Aggregator[S6, _, R6] :: Aggregator[S7, _, R7] :: Aggregator[S8, _, R8] :: Aggregator[S9, _, R9] :: Aggregator[S10, _, R10] :: Aggregator[S11, _, R11] :: Aggregator[S12, _, R12] :: Aggregator[S13, _, R13] :: Aggregator[S14, _, R14] :: Aggregator[S15, _, R15] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: R6 :: R7 :: R8 :: R9 :: R10 :: R11 :: R12 :: R13 :: R14 :: R15 :: HNil = agg.head.result(states.head) :: aggsToResults14(agg.tail, states.tail)
  def aggsToResults16[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5, R6, S6, R7, S7, R8, S8, R9, S9, R10, S10, R11, S11, R12, S12, R13, S13, R14, S14, R15, S15, R16, S16](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: Aggregator[S6, _, R6] :: Aggregator[S7, _, R7] :: Aggregator[S8, _, R8] :: Aggregator[S9, _, R9] :: Aggregator[S10, _, R10] :: Aggregator[S11, _, R11] :: Aggregator[S12, _, R12] :: Aggregator[S13, _, R13] :: Aggregator[S14, _, R14] :: Aggregator[S15, _, R15] :: Aggregator[S16, _, R16] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: R6 :: R7 :: R8 :: R9 :: R10 :: R11 :: R12 :: R13 :: R14 :: R15 :: R16 :: HNil = agg.head.result(states.head) :: aggsToResults15(agg.tail, states.tail)
  def aggsToResults17[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5, R6, S6, R7, S7, R8, S8, R9, S9, R10, S10, R11, S11, R12, S12, R13, S13, R14, S14, R15, S15, R16, S16, R17, S17](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: Aggregator[S6, _, R6] :: Aggregator[S7, _, R7] :: Aggregator[S8, _, R8] :: Aggregator[S9, _, R9] :: Aggregator[S10, _, R10] :: Aggregator[S11, _, R11] :: Aggregator[S12, _, R12] :: Aggregator[S13, _, R13] :: Aggregator[S14, _, R14] :: Aggregator[S15, _, R15] :: Aggregator[S16, _, R16] :: Aggregator[S17, _, R17] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: R6 :: R7 :: R8 :: R9 :: R10 :: R11 :: R12 :: R13 :: R14 :: R15 :: R16 :: R17 :: HNil = agg.head.result(states.head) :: aggsToResults16(agg.tail, states.tail)
  def aggsToResults18[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5, R6, S6, R7, S7, R8, S8, R9, S9, R10, S10, R11, S11, R12, S12, R13, S13, R14, S14, R15, S15, R16, S16, R17, S17, R18, S18](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: Aggregator[S6, _, R6] :: Aggregator[S7, _, R7] :: Aggregator[S8, _, R8] :: Aggregator[S9, _, R9] :: Aggregator[S10, _, R10] :: Aggregator[S11, _, R11] :: Aggregator[S12, _, R12] :: Aggregator[S13, _, R13] :: Aggregator[S14, _, R14] :: Aggregator[S15, _, R15] :: Aggregator[S16, _, R16] :: Aggregator[S17, _, R17] :: Aggregator[S18, _, R18] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: S18 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: R6 :: R7 :: R8 :: R9 :: R10 :: R11 :: R12 :: R13 :: R14 :: R15 :: R16 :: R17 :: R18 :: HNil = agg.head.result(states.head) :: aggsToResults17(agg.tail, states.tail)
  def aggsToResults19[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5, R6, S6, R7, S7, R8, S8, R9, S9, R10, S10, R11, S11, R12, S12, R13, S13, R14, S14, R15, S15, R16, S16, R17, S17, R18, S18, R19, S19](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: Aggregator[S6, _, R6] :: Aggregator[S7, _, R7] :: Aggregator[S8, _, R8] :: Aggregator[S9, _, R9] :: Aggregator[S10, _, R10] :: Aggregator[S11, _, R11] :: Aggregator[S12, _, R12] :: Aggregator[S13, _, R13] :: Aggregator[S14, _, R14] :: Aggregator[S15, _, R15] :: Aggregator[S16, _, R16] :: Aggregator[S17, _, R17] :: Aggregator[S18, _, R18] :: Aggregator[S19, _, R19] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: S18 :: S19 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: R6 :: R7 :: R8 :: R9 :: R10 :: R11 :: R12 :: R13 :: R14 :: R15 :: R16 :: R17 :: R18 :: R19 :: HNil = agg.head.result(states.head) :: aggsToResults18(agg.tail, states.tail)
  def aggsToResults20[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5, R6, S6, R7, S7, R8, S8, R9, S9, R10, S10, R11, S11, R12, S12, R13, S13, R14, S14, R15, S15, R16, S16, R17, S17, R18, S18, R19, S19, R20, S20](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: Aggregator[S6, _, R6] :: Aggregator[S7, _, R7] :: Aggregator[S8, _, R8] :: Aggregator[S9, _, R9] :: Aggregator[S10, _, R10] :: Aggregator[S11, _, R11] :: Aggregator[S12, _, R12] :: Aggregator[S13, _, R13] :: Aggregator[S14, _, R14] :: Aggregator[S15, _, R15] :: Aggregator[S16, _, R16] :: Aggregator[S17, _, R17] :: Aggregator[S18, _, R18] :: Aggregator[S19, _, R19] :: Aggregator[S20, _, R20] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: S18 :: S19 :: S20 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: R6 :: R7 :: R8 :: R9 :: R10 :: R11 :: R12 :: R13 :: R14 :: R15 :: R16 :: R17 :: R18 :: R19 :: R20 :: HNil = agg.head.result(states.head) :: aggsToResults19(agg.tail, states.tail)
  def aggsToResults21[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5, R6, S6, R7, S7, R8, S8, R9, S9, R10, S10, R11, S11, R12, S12, R13, S13, R14, S14, R15, S15, R16, S16, R17, S17, R18, S18, R19, S19, R20, S20, R21, S21](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: Aggregator[S6, _, R6] :: Aggregator[S7, _, R7] :: Aggregator[S8, _, R8] :: Aggregator[S9, _, R9] :: Aggregator[S10, _, R10] :: Aggregator[S11, _, R11] :: Aggregator[S12, _, R12] :: Aggregator[S13, _, R13] :: Aggregator[S14, _, R14] :: Aggregator[S15, _, R15] :: Aggregator[S16, _, R16] :: Aggregator[S17, _, R17] :: Aggregator[S18, _, R18] :: Aggregator[S19, _, R19] :: Aggregator[S20, _, R20] :: Aggregator[S21, _, R21] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: S18 :: S19 :: S20 :: S21 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: R6 :: R7 :: R8 :: R9 :: R10 :: R11 :: R12 :: R13 :: R14 :: R15 :: R16 :: R17 :: R18 :: R19 :: R20 :: R21 :: HNil = agg.head.result(states.head) :: aggsToResults20(agg.tail, states.tail)
  def aggsToResults22[R1, S1, R2, S2, R3, S3, R4, S4, R5, S5, R6, S6, R7, S7, R8, S8, R9, S9, R10, S10, R11, S11, R12, S12, R13, S13, R14, S14, R15, S15, R16, S16, R17, S17, R18, S18, R19, S19, R20, S20, R21, S21, R22, S22](agg: Aggregator[S1, _, R1] :: Aggregator[S2, _, R2] :: Aggregator[S3, _, R3] :: Aggregator[S4, _, R4] :: Aggregator[S5, _, R5] :: Aggregator[S6, _, R6] :: Aggregator[S7, _, R7] :: Aggregator[S8, _, R8] :: Aggregator[S9, _, R9] :: Aggregator[S10, _, R10] :: Aggregator[S11, _, R11] :: Aggregator[S12, _, R12] :: Aggregator[S13, _, R13] :: Aggregator[S14, _, R14] :: Aggregator[S15, _, R15] :: Aggregator[S16, _, R16] :: Aggregator[S17, _, R17] :: Aggregator[S18, _, R18] :: Aggregator[S19, _, R19] :: Aggregator[S20, _, R20] :: Aggregator[S21, _, R21] :: Aggregator[S22, _, R22] :: HNil, states: S1 :: S2 :: S3 :: S4 :: S5 :: S6 :: S7 :: S8 :: S9 :: S10 :: S11 :: S12 :: S13 :: S14 :: S15 :: S16 :: S17 :: S18 :: S19 :: S20 :: S21 :: S22 :: HNil): R1 :: R2 :: R3 :: R4 :: R5 :: R6 :: R7 :: R8 :: R9 :: R10 :: R11 :: R12 :: R13 :: R14 :: R15 :: R16 :: R17 :: R18 :: R19 :: R20 :: R21 :: R22 :: HNil = agg.head.result(states.head) :: aggsToResults21(agg.tail, states.tail)
}
